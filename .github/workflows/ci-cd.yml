# .github/workflows/ci-cd.yml

name: CI/CD - DevOps Application

on:
  push:
    branches:
    - '**' # Se ejecuta en todas las ramas
  workflow_dispatch:
    # Permite ejecución manual

env:
  PYTHON_VERSION: '3.10'
  APP_NAME: "devops-app" # Nombre de tu app

jobs:
  # --- 1. ETAPA DE TEST ---
  test:
    name: "Test y Lint"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
    - name: "1. Checkout de código"
      uses: actions/checkout@v4
    - name: "2. Configurar Python"
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: "3. Instalar dependencias"
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 pytest
    - name: "4. Revisión Estática (Lint)"
      run: flake8 . --count --show-source --statistics
      continue-on-error: true
    - name: "5. Pruebas Unitarias (Test)"
      run: pytest
      continue-on-error: true

  # --- 2. ETAPA DE BUILD ---
  build_and_push:
    name: "Build y Push a ACR"
    runs-on: ubuntu-latest
    needs: test
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}

    outputs:
      image_tag: ${{ steps.vars.outputs.IMAGE_TAG }}

    steps:
    - name: "1. Checkout de código"
      uses: actions/checkout@v4

    - name: "2. Definir Tag"
      id: vars
      run: |
        IMAGE_TAG=${{ github.sha }}
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: "3. Iniciar sesión en Azure"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIAL }}

    - name: "4. Iniciar sesión en ACR"
      # Lee el nombre completo del secreto
      run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

    - name: "5. Construir y Subir imagen a ACR"
      run: |
        # Lee el login server DIRECTAMENTE de los secretos
        ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}
        # Lee el tag de los outputs del paso 'vars'
        IMAGE_TAG=${{ steps.vars.outputs.IMAGE_TAG }}

        docker build -t $ACR_LOGIN_SERVER/${{ env.APP_NAME }}:$IMAGE_TAG ./app
        docker push $ACR_LOGIN_SERVER/${{ env.APP_NAME }}:$IMAGE_TAG

  # --- 3. ETAPA DE DESPLIEGUE ---
  deploy:
    name: "Desplegar en Kubernetes (AKS)"
    runs-on: ubuntu-latest
    needs: build_and_push

    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}
    env:
      K8S_OVERLAY: ${{ github.ref == 'refs/heads/main' && 'prod' || 'test' }}

    steps:
    - name: "1. Checkout de código"
      uses: actions/checkout@v4

    - name: "3. Instalar Kustomize"
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: "4. Iniciar sesión en Azure"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIAL }}

    - name: "5. Obtener credenciales de AKS"
      run: |
        az aks get-credentials --resource-group ${{ secrets.RG_NAME }} --name ${{ secrets.AKS_CLUSTER }} --overwrite-existing

    - name: "6. Actualizar manifiestos de Kustomize"
      working-directory: ./app/k8s/overlays/${{ env.K8S_OVERLAY }}
      run: |
        # Lee el login server DIRECTAMENTE de los secretos
        ACR_LOGIN_SERVER=${{ secrets.ACR_LOGIN_SERVER }}
        # Lee el tag de los outputs del job anterior
        IMAGE_TAG=${{ needs.build_and_push.outputs.image_tag }}

        KV_URL=${{ secrets.KV_URL }}
        CLIENT_ID=${{ secrets.CLIENT_ID }}

        echo "Aplicando Kustomize para ${{ env.K8S_OVERLAY }}"

        # 1. Actualizar la imagen y el tag
        kustomize edit set image placeholder.acr.io/app=$ACR_LOGIN_SERVER/${{ env.APP_NAME }}:$IMAGE_TAG

        # 2. Reemplazar placeholders de Workload Identity
        sed -i 's|CLIENT_ID_DE_TEST|'${CLIENT_ID}'|g' kustomization.yaml
        sed -i 's|CLIENT_ID_DE_PROD|'${CLIENT_ID}'|g' kustomization.yaml
        sed -i 's|https://kv-test-devops-app.vault.azure.net|'${KV_URL}'|g' kustomization.yaml
        sed -i 's|https://kv-prod-devops-app.vault.azure.net|'${KV_URL}'|g' kustomization.yaml

    - name: "7. Desplegar aplicación con Kustomize"
      run: |
        kustomize build ./app/k8s/overlays/${{ env.K8S_OVERLAY }} | kubectl apply -f -
